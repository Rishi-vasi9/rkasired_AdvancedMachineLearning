# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_frh <- cbind(peer_frh, lambda_frh, eff_frh)
# Show the summary chart
peer_lamb_eff_frh
knitr::opts_chunk$set(echo = TRUE)
# Upload libraries needed
install.packages("Benchmarking")
library(Benchmarking)
library(tidyverse)
# Upload libraries needed
install.packages("Benchmarking")
library(Benchmarking)
library(tidyverse)
install.packages("Benchmarking")
knitr::opts_chunk$set(echo = TRUE)
# To create the vectors with our values
input <- matrix(c(150,400,320,520,350, 320, 200, 700, 1200, 2000, 1200, 700),ncol = 2)
output <- matrix(c(14000,14000,42000,28000,19000,14000,3500,21000,10500,42000,
25000, 15000),ncol = 2)
# Assign column names
colnames(output) <- c("staff_hours_daily","supplies_daily")
colnames(input) <- c("reimbursed_patient_daily", "privately_paid_patient-daily")
# To see the values of Input
input
# To create the vectors with our values
input <- matrix(c(250,500,420,620,450, 420, 300, 800, 1300, 2100, 1300, 800),ncol = 2)
output <- matrix(c(15000,13000,52000,38000,29000,15000,4500,22000,11500,43000,
25000, 15000),ncol = 2)
# Assigning column names
colnames(output) <- c("staff_hours_daily","supplies_daily")
colnames(input) <- c("reimbursed_patient_daily", "privately_paid_patient-daily")
# To see the values of Input
input
# To create the vectors with our values
input <- matrix(c(250,500,420,620,450, 420, 300, 800, 1300, 2100, 1300, 800),ncol = 2)
output <- matrix(c(15000,13000,52000,38000,29000,15000,4500,22000,11500,43000,
26000, 16000),ncol = 2)
# Assigning column names
colnames(output) <- c("staffhours_daily","supplies_daily")
colnames(input) <- c("reimbursed_patientdaily", "privately_paid_patientdaily")
# To see the values of Input
input
# To see the values of Output
output
# Provide the input and output
analysis_fdh<- dea(input,output,RTS = "fdh")
# Provide the input and output
analysis_fdh<- dea(input,output,RTS = "fdh")
# Upload libraries needed
install.packages("Benchmarking")
install.packages("dea")
library(Benchmarking)
library(tidyverse)
# Provide the input and output
analysis_frh <- dea(input,output,RTS = "add")
# To see the effciency values
eff_frh <- as.data.frame(analysis_frh$eff)
# To assign an appropiate name
colnames(eff_frh) <- c("efficiency_frh")
# Identify the peers
peer_frh <- peers(analysis_frh)
# To assign an appropiate name
colnames(peer_frh) <- c("peer1_frh")
# Identify the relative weights given to the peers using lambda function
lambda_frh <- lambda(analysis_frh)
# To assign an appropiate column name for Lambda
colnames(lambda_frh) <- c("L1_frh", "L2_frh", "L3_frh", "L4_frh", "L5_frh", "L6_frh")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_frh <- cbind(peer_frh, lambda_frh, eff_frh)
# Show the summary chart
peer_lamb_eff_frh
# Provide the input and output
analysis_drs <- dea(input,output,RTS = "drs")
# To see the effciency values
eff_drs <- as.data.frame(analysis_drs$eff)
# To assign an appropiate name
colnames(eff_drs) <- c("efficiency_drs")
# Identify the peers
peer_drs <- peers(analysis_drs)
# To assign an appropiate name
colnames(peer_drs) <- c("peer1_drs", "peer2_drs", "peer3_drs")
# Identify the relative weights given to the peers using lambda function
lambda_drs <- lambda(analysis_drs)
# To assign an appropiate column name for Lambda
colnames(lambda_drs) <- c("L1_drs", "L2_drs", "L3_drs", "L4_drs")
# To create the vectors with our values
input <- matrix(c(250,500,420,620,450, 420, 300, 800, 1300, 2100, 1300, 800),ncol = 2)
output <- matrix(c(15000,13000,52000,38000,29000,15000,4500,22000,11500,43000,
26000, 16000),ncol = 2)
# Assigning column names
colnames(output) <- c("staffhours_daily","supplies_daily")
colnames(input) <- c("reimbursed_patientdaily", "privately_paid_patientdaily")
# To see the values of Input
input
# To look the values of Output
output
# Provide the input and output
analysis_fdh<- dea(input,output,RTS = "fdh")
# Create a data frame with effciency values
eff_fdh <- as.data.frame(analysis_fdh$eff)
# To assign an appropiate name
colnames(eff_fdh) <- c("efficiency_fdh")
# Identify the peers
peer_fdh <- peers(analysis_fdh)
# To assign an appropiate name
colnames(peer_fdh) <- c("peer1_fdh")
# Identify the relative weights given to the peers using lambda function
lambda_fdh <- lambda(analysis_fdh)
# To assign an appropiate column name for Lambda
colnames(lambda_fdh) <- c("L1_fdh", "L2_fdh", "L3_fdh", "L4_fdh", "L5_fdh", "L6_fdh")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_fdh <- cbind(peer_fdh, lambda_fdh, eff_fdh)
# Show the summary chart
peer_lamb_eff_fdh
# Plot the results
dea.plot(input,output,RTS="fdh",ORIENTATION="in-out",txt=TRUE,  main="Free disposability hull (FDH) Graph")
# Plot the results
dea.plot(input,output,RTS="fdh",ORIENTATION="in-out",txt=TRUE,  main="Free disposability hull (FDH) Graph")
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs")
knitr::opts_chunk$set(echo = TRUE)
# Upload libraries needed
install.packages("Benchmarking")
install.packages("dea")
knitr::opts_chunk$set(echo = TRUE)
# Upload libraries needed
install.packages("Benchmarking")
install.packages("dea")
library(Benchmarking)
library(tidyverse)
# To create the vectors with our values
input <- matrix(c(250,500,420,620,450, 420, 300, 800, 1300, 2100, 1300, 800),ncol = 2)
output <- matrix(c(15000,13000,52000,38000,29000,15000,4500,22000,11500,43000,
26000, 16000),ncol = 2)
# Assigning column names
colnames(output) <- c("staffhours_daily","supplies_daily")
colnames(input) <- c("reimbursed_patientdaily", "privately_paid_patientdaily")
# To see the values of Input
input
# To look the values of Output
output
# Provide the input and output
analysis_fdh<- dea(input,output,RTS = "fdh")
# Create a data frame with effciency values
eff_fdh <- as.data.frame(analysis_fdh$eff)
# To assign an appropiate name
colnames(eff_fdh) <- c("efficiency_fdh")
# Identify the peers
peer_fdh <- peers(analysis_fdh)
# To assign an appropiate name
colnames(peer_fdh) <- c("peer1_fdh")
# Identify the relative weights given to the peers using lambda function
lambda_fdh <- lambda(analysis_fdh)
# To assign an appropiate column name for Lambda
colnames(lambda_fdh) <- c("L1_fdh", "L2_fdh", "L3_fdh", "L4_fdh", "L5_fdh", "L6_fdh")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_fdh <- cbind(peer_fdh, lambda_fdh, eff_fdh)
# Show the summary chart
peer_lamb_eff_fdh
# Plot the results
dea.plot(input,output,RTS="fdh",ORIENTATION="in-out",txt=TRUE,  main="Free disposability hull (FDH) Graph")
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs")
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs", "L5_crs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_crs <- cbind(peer_crs, lambda_crs, eff_crs)
# Show the summary chart
peer_lamb_eff_crs
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs", "L5_crs, "L6_crs")
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs", "L5_crs)
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_crs <- cbind(peer_crs, lambda_crs, eff_crs)
# Show the summary chart
peer_lamb_eff_crs
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs", "L5_crs", "L6_crs")
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs", "L5_crs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_crs <- cbind(peer_crs, lambda_crs, eff_crs)
# Show the summary chart
peer_lamb_eff_crs
# Plot the results
dea.plot (input, output,RTS="crs",ORIENTATION="in-out",txt=TRUE,  main="Constant Returns to Scale (CRS) Graph")
# Provide the input and output
analysis_vrs <- dea(input,output,RTS = "vrs")
# To see the effciency values
eff_vrs <- as.data.frame(analysis_vrs$eff)
# To assign an appropiate name
colnames(eff_vrs) <- c("efficiency_vrs")
# Identify the peers
peer_vrs <- peers(analysis_vrs)
# To assign an appropiate name
colnames(peer_vrs) <- c("peer1_vrs", "peer2_vrs", "peer3_vrs")
# Identify the relative weights given to the peers using lambda function
lambda_vrs <- lambda(analysis_vrs)
# To assign an appropiate column name for Lambda
colnames(lambda_vrs) <- c("L1_vrs", "L2_vrs", "L3_vrs", "L4_vrs", "L5_vrs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_vrs <- cbind(peer_vrs, lambda_vrs, eff_vrs)
# Show the summary chart
peer_lamb_eff_vrs
# Plot the results
dea.plot(input,output,RTS="vrs",ORIENTATION="in-out",txt=TRUE, main="Variable Returns to Scale (VRS) Graph")
# Provide the input and output
analysis_irs <- dea(input,output,RTS = "irs")
# To see the effciency values
eff_irs <- as.data.frame(analysis_irs$eff)
# To assign an appropiate name
colnames(eff_irs) <- c("efficiency_irs")
# Identify the peers
peer_irs <- peers(analysis_irs)
# To assign an appropiate name
colnames(peer_irs) <- c("peer1_irs", "peer2_irs", "peer3_irs")
# Identify the relative weights given to the peers using lambda function
lambda_irs <- lambda(analysis_irs)
# To assign an appropiate column name for Lambda
colnames(lambda_irs) <- c("L1_irs", "L2_irs", "L3_irs", "L4_irs", "L5_irs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_irs <- cbind(peer_irs, lambda_irs, eff_irs)
# Show the summary chart
peer_lamb_eff_irs
# Plot the results
dea.plot(input,output,RTS="irs",ORIENTATION="in-out",txt=TRUE , main="Increasing Returns to Scale (IRS) Graph")
# Provide the input and output
analysis_drs <- dea(input,output,RTS = "drs")
# To see the effciency values
eff_drs <- as.data.frame(analysis_drs$eff)
# To assign an appropiate name
colnames(eff_drs) <- c("efficiency_drs")
# Identify the peers
peer_drs <- peers(analysis_drs)
# To assign an appropiate name
colnames(peer_drs) <- c("peer1_drs", "peer2_drs", "peer3_drs")
# Identify the relative weights given to the peers using lambda function
lambda_drs <- lambda(analysis_drs)
# To assign an appropiate column name for Lambda
colnames(lambda_drs) <- c("L1_drs", "L2_drs", "L3_drs", "L4_drs")
# Provide the input and output
analysis_drs <- dea(input,output,RTS = "drs")
# To see the effciency values
eff_drs <- as.data.frame(analysis_drs$eff)
# To assign an appropiate name
colnames(eff_drs) <- c("efficiency_drs")
# Identify the peers
peer_drs <- peers(analysis_drs)
# To assign an appropiate name
colnames(peer_drs) <- c("peer1_drs", "peer2_drs", "peer3_drs")
# Identify the relative weights given to the peers using lambda function
lambda_drs <- lambda(analysis_drs)
# To assign an appropiate column name for Lambda
colnames(lambda_drs) <- c("L1_drs", "L2_drs", "L3_drs", "L4_drs", "L5_drs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_drs <- cbind(peer_drs, lambda_drs, eff_drs)
# Show the summary chart
peer_lamb_eff_drs
# Plot the results
dea.plot(input,output,RTS="drs",ORIENTATION="in-out",txt=TRUE, main="Decreasing Returns to Scale (DRS) Graph")
# Provide the input and output
analysis_frh <- dea(input,output,RTS = "add")
# To see the effciency values
eff_frh <- as.data.frame(analysis_frh$eff)
# To assign an appropiate name
colnames(eff_frh) <- c("efficiency_frh")
# Identify the peers
peer_frh <- peers(analysis_frh)
# To assign an appropiate name
colnames(peer_frh) <- c("peer1_frh")
# Identify the relative weights given to the peers using lambda function
lambda_frh <- lambda(analysis_frh)
# To assign an appropiate column name for Lambda
colnames(lambda_frh) <- c("L1_frh", "L2_frh", "L3_frh", "L4_frh", "L5_frh", "L6_frh")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_frh <- cbind(peer_frh, lambda_frh, eff_frh)
# Show the summary chart
peer_lamb_eff_frh
# Plot the results
dea.plot(input,output,RTS="add",ORIENTATION="in-out",txt=TRUE,  main="Free Replicability Hull (FRH) Graph")
dea.plot(input,output,RTS="fdh",ORIENTATION="in-out",txt=TRUE,  main="Free disposability hull (FDH) Graph")
dea.plot(input,output,RTS="vrs",ORIENTATION="in-out",txt=TRUE,  main="Variable Returns to Scale (VRS) Graph")
dea.plot(input,output,RTS="drs",ORIENTATION="in-out",txt=TRUE,  main="Decreasing Returns to Scale (DRS) Graph")
dea.plot(input,output,RTS="irs",ORIENTATION="in-out",txt=TRUE,  main="Increasing Returns to Scale (IRS) Graph")
dea.plot(input,output,RTS="crs",ORIENTATION="in-out",txt=TRUE, main="Constant Returns to Scale (CRS) Graph")
dea.plot(input,output,RTS="add",ORIENTATION="in-out",txt=TRUE, main="Free Replicability Hull (FRH) Graph")
knitr::opts_chunk$set(echo = TRUE)
# Upload libraries needed
install.packages("Benchmarking")
install.packages("dea")
knitr::opts_chunk$set(echo = TRUE)
# Upload libraries needed
install.packages("Benchmarking")
install.packages("dea")
library(Benchmarking)
library(tidyverse)
# To create the vectors with our values
input <- matrix(c(250,500,420,620,450, 420, 300, 800, 1300, 2100, 1300, 800),ncol = 2)
output <- matrix(c(15000,13000,52000,38000,29000,15000,4500,22000,11500,43000,
26000, 16000),ncol = 2)
# Assigning column names
colnames(output) <- c("staffhours_daily","supplies_daily")
colnames(input) <- c("reimbursed_patientdaily", "privately_paid_patientdaily")
# To see the values of Input
input
# To look the values of Output
output
# Provide the input and output
analysis_fdh<- dea(input,output,RTS = "fdh")
# Create a data frame with effciency values
eff_fdh <- as.data.frame(analysis_fdh$eff)
# To assign an appropiate name
colnames(eff_fdh) <- c("efficiency_fdh")
# Identify the peers
peer_fdh <- peers(analysis_fdh)
# To assign an appropiate name
colnames(peer_fdh) <- c("peer1_fdh")
# Identify the relative weights given to the peers using lambda function
lambda_fdh <- lambda(analysis_fdh)
# To assign an appropiate column name for Lambda
colnames(lambda_fdh) <- c("L1_fdh", "L2_fdh", "L3_fdh", "L4_fdh", "L5_fdh", "L6_fdh")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_fdh <- cbind(peer_fdh, lambda_fdh, eff_fdh)
# Show the summary chart
peer_lamb_eff_fdh
# Plot the results
dea.plot(input,output,RTS="fdh",ORIENTATION="in-out",txt=TRUE,  main="Free disposability hull (FDH) Graph")
# Provide the input and output
analysis_crs <- dea(input,output,RTS = "crs")
# To see the effciency values
eff_crs <- as.data.frame(analysis_crs$eff)
# To assign an appropiate name
colnames(eff_crs) <- c("efficiency_crs")
# Identify the peers
peer_crs <- peers(analysis_crs)
# To assign an appropiate name
colnames(peer_crs) <- c("peer1_crs", "peer2_crs", "peer3_crs")
# Identify the relative weights given to the peers using lambda function
lambda_crs <- lambda(analysis_crs)
# To assign an appropiate column name for Lambda
colnames(lambda_crs) <- c("L1_crs", "L2_crs", "L3_crs", "L4_crs", "L5_crs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_crs <- cbind(peer_crs, lambda_crs, eff_crs)
# Show the summary chart
peer_lamb_eff_crs
# Plot the results
dea.plot (input, output,RTS="crs",ORIENTATION="in-out",txt=TRUE,  main="Constant Returns to Scale (CRS) Graph")
# Provide the input and output
analysis_vrs <- dea(input,output,RTS = "vrs")
# To see the effciency values
eff_vrs <- as.data.frame(analysis_vrs$eff)
# To assign an appropiate name
colnames(eff_vrs) <- c("efficiency_vrs")
# Identify the peers
peer_vrs <- peers(analysis_vrs)
# To assign an appropiate name
colnames(peer_vrs) <- c("peer1_vrs", "peer2_vrs", "peer3_vrs")
# Identify the relative weights given to the peers using lambda function
lambda_vrs <- lambda(analysis_vrs)
# To assign an appropiate column name for Lambda
colnames(lambda_vrs) <- c("L1_vrs", "L2_vrs", "L3_vrs", "L4_vrs", "L5_vrs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_vrs <- cbind(peer_vrs, lambda_vrs, eff_vrs)
# Show the summary chart
peer_lamb_eff_vrs
# Plot the results
dea.plot(input,output,RTS="vrs",ORIENTATION="in-out",txt=TRUE, main="Variable Returns to Scale (VRS) Graph")
# Provide the input and output
analysis_irs <- dea(input,output,RTS = "irs")
# To see the effciency values
eff_irs <- as.data.frame(analysis_irs$eff)
# To assign an appropiate name
colnames(eff_irs) <- c("efficiency_irs")
# Identify the peers
peer_irs <- peers(analysis_irs)
# To assign an appropiate name
colnames(peer_irs) <- c("peer1_irs", "peer2_irs", "peer3_irs")
# Identify the relative weights given to the peers using lambda function
lambda_irs <- lambda(analysis_irs)
# To assign an appropiate column name for Lambda
colnames(lambda_irs) <- c("L1_irs", "L2_irs", "L3_irs", "L4_irs", "L5_irs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_irs <- cbind(peer_irs, lambda_irs, eff_irs)
# Show the summary chart
peer_lamb_eff_irs
# Plot the results
dea.plot(input,output,RTS="irs",ORIENTATION="in-out",txt=TRUE , main="Increasing Returns to Scale (IRS) Graph")
# Provide the input and output
analysis_drs <- dea(input,output,RTS = "drs")
# To see the effciency values
eff_drs <- as.data.frame(analysis_drs$eff)
# To assign an appropiate name
colnames(eff_drs) <- c("efficiency_drs")
# Identify the peers
peer_drs <- peers(analysis_drs)
# To assign an appropiate name
colnames(peer_drs) <- c("peer1_drs", "peer2_drs", "peer3_drs")
# Identify the relative weights given to the peers using lambda function
lambda_drs <- lambda(analysis_drs)
# To assign an appropiate column name for Lambda
colnames(lambda_drs) <- c("L1_drs", "L2_drs", "L3_drs", "L4_drs", "L5_drs")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_drs <- cbind(peer_drs, lambda_drs, eff_drs)
# Show the summary chart
peer_lamb_eff_drs
# Plot the results
dea.plot(input,output,RTS="drs",ORIENTATION="in-out",txt=TRUE, main="Decreasing Returns to Scale (DRS) Graph")
# Provide the input and output
analysis_frh <- dea(input,output,RTS = "add")
# To see the effciency values
eff_frh <- as.data.frame(analysis_frh$eff)
# To assign an appropiate name
colnames(eff_frh) <- c("efficiency_frh")
# Identify the peers
peer_frh <- peers(analysis_frh)
# To assign an appropiate name
colnames(peer_frh) <- c("peer1_frh")
# Identify the relative weights given to the peers using lambda function
lambda_frh <- lambda(analysis_frh)
# To assign an appropiate column name for Lambda
colnames(lambda_frh) <- c("L1_frh", "L2_frh", "L3_frh", "L4_frh", "L5_frh", "L6_frh")
# Create a tabular data with peer, lambda, and efficiency
peer_lamb_eff_frh <- cbind(peer_frh, lambda_frh, eff_frh)
# Show the summary chart
peer_lamb_eff_frh
# Plot the results
dea.plot(input,output,RTS="add",ORIENTATION="in-out",txt=TRUE,  main="Free Replicability Hull (FRH) Graph")
